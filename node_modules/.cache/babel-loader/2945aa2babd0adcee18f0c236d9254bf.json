{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Shi Yao Chu\\\\Desktop\\\\webdev\\\\react\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\nexport const purchaseSuccess = (id, order) => {\n  return {\n    type: actionTypes.PURCHASE_SUCCESS,\n    id: id,\n    order: order\n  };\n};\nexport const purchaseFail = error => {\n  return {\n    type: actionTypes.PURCHASE_FAIL,\n    error: error\n  };\n};\nexport const purchaseStart = () => {\n  return {\n    type: actionTypes.PURCHASE_START\n  };\n};\nexport const purchaseBurger = order => {\n  return dispatch => {\n    dispatch(purchaseStart());\n    axios.post('/orders.json', order).then(res => {\n      dispatch(purchaseSuccess(res.data.name, order));\n    }).catch(error => {\n      dispatch(purchaseFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchOrdersInit = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_INIT\n  };\n};\nexport const fetchOrders = () => {\n  return dispatch => {\n    dispatch(fetchOrdersInit());\n    axios.get('/orders.json').then(res => {\n      const fetched = [];\n\n      for (let key in res.data) {\n        fetched.push(_objectSpread({}, res.data[key], {\n          id: key\n        }));\n      }\n\n      dispatch(fetchOrdersSuccess(fetched));\n    }).catch(res => {\n      dispatch(fetchOrdersFail(res));\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Shi Yao Chu\\desktop\\webdev\\react\\burger-builder\\src\\store\\actions\\order.js"],"names":["actionTypes","axios","purchaseSuccess","id","order","type","PURCHASE_SUCCESS","purchaseFail","error","PURCHASE_FAIL","purchaseStart","PURCHASE_START","purchaseBurger","dispatch","post","then","res","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrdersInit","FETCH_ORDERS_INIT","fetchOrders","get","fetched","key","push"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,EAAD,EAAKC,KAAL,KAAe;AAC1C,SAAO;AACHC,IAAAA,IAAI,EAAEL,WAAW,CAACM,gBADf;AAEHH,IAAAA,EAAE,EAAEA,EAFD;AAGHC,IAAAA,KAAK,EAAEA;AAHJ,GAAP;AAKH,CANM;AAQP,OAAO,MAAMG,YAAY,GAAIC,KAAD,IAAW;AACnC,SAAO;AACHH,IAAAA,IAAI,EAAEL,WAAW,CAACS,aADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,aAAa,GAAG,MAAM;AAC/B,SAAO;AACHL,IAAAA,IAAI,EAAEL,WAAW,CAACW;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAIR,KAAD,IAAW;AACrC,SAAOS,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACH,aAAa,EAAd,CAAR;AACAT,IAAAA,KAAK,CAACa,IAAN,CAAW,cAAX,EAA2BV,KAA3B,EACKW,IADL,CACUC,GAAG,IAAI;AACTH,MAAAA,QAAQ,CAACX,eAAe,CAACc,GAAG,CAACC,IAAJ,CAASC,IAAV,EAAed,KAAf,CAAhB,CAAR;AACH,KAHL,EAIKe,KAJL,CAIWX,KAAK,IAAI;AACZK,MAAAA,QAAQ,CAACN,YAAY,CAACC,KAAD,CAAb,CAAR;AACH,KANL;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMY,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHf,IAAAA,IAAI,EAAEL,WAAW,CAACqB;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AAC1C,SAAO;AACHlB,IAAAA,IAAI,EAAEL,WAAW,CAACwB,oBADf;AAEHD,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,eAAe,GAAIjB,KAAD,IAAW;AACtC,SAAO;AACHH,IAAAA,IAAI,EAAEL,WAAW,CAAC0B,iBADf;AAEHlB,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMmB,eAAe,GAAG,MAAM;AACjC,SAAO;AACHtB,IAAAA,IAAI,EAAEL,WAAW,CAAC4B;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,SAAOhB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACc,eAAe,EAAhB,CAAR;AACA1B,IAAAA,KAAK,CAAC6B,GAAN,CAAU,cAAV,EACCf,IADD,CACMC,GAAG,IAAI;AACT,YAAMe,OAAO,GAAG,EAAhB;;AACA,WAAK,IAAIC,GAAT,IAAgBhB,GAAG,CAACC,IAApB,EAA0B;AACtBc,QAAAA,OAAO,CAACE,IAAR,mBACOjB,GAAG,CAACC,IAAJ,CAASe,GAAT,CADP;AAEI7B,UAAAA,EAAE,EAAE6B;AAFR;AAIH;;AACDnB,MAAAA,QAAQ,CAACS,kBAAkB,CAACS,OAAD,CAAnB,CAAR;AACH,KAVD,EAWCZ,KAXD,CAWOH,GAAG,IAAI;AACVH,MAAAA,QAAQ,CAACY,eAAe,CAACT,GAAD,CAAhB,CAAR;AACH,KAbD;AAcH,GAhBD;AAiBH,CAlBM","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios-orders';\r\n\r\nexport const purchaseSuccess = (id, order) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_SUCCESS,\r\n        id: id,\r\n        order: order\r\n    }\r\n};\r\n\r\nexport const purchaseFail = (error) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_FAIL,\r\n        error: error\r\n    }\r\n};\r\n\r\nexport const purchaseStart = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_START\r\n    };\r\n}\r\n\r\nexport const purchaseBurger = (order) => {\r\n    return dispatch => {\r\n        dispatch(purchaseStart());\r\n        axios.post('/orders.json', order)\r\n            .then(res => {\r\n                dispatch(purchaseSuccess(res.data.name,order));\r\n            })\r\n            .catch(error => {\r\n                dispatch(purchaseFail(error));\r\n            });\r\n    }\r\n};\r\n\r\nexport const purchaseInit = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_INIT\r\n    };\r\n}\r\n\r\nexport const fetchOrdersSuccess = (orders) => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\r\n        orders: orders\r\n    };\r\n}\r\n\r\nexport const fetchOrdersFail = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_FAIL,\r\n        error: error\r\n    };\r\n}\r\n\r\nexport const fetchOrdersInit = () => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_INIT\r\n    };\r\n}\r\n\r\nexport const fetchOrders = () => {\r\n    return dispatch => {\r\n        dispatch(fetchOrdersInit());\r\n        axios.get('/orders.json')\r\n        .then(res => {\r\n            const fetched = [];\r\n            for (let key in res.data) {\r\n                fetched.push({\r\n                    ...res.data[key],\r\n                    id: key\r\n                });\r\n            }\r\n            dispatch(fetchOrdersSuccess(fetched));\r\n        })\r\n        .catch(res => {\r\n            dispatch(fetchOrdersFail(res))\r\n        });\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}